From 2f57fb15ab010e48c879391423044d3e0af0851a Mon Sep 17 00:00:00 2001
From: Rytis Karpuska <rytis.karpuska@gmail.com>
Date: Mon, 30 Sep 2019 02:56:50 +0300
Subject: [PATCH 2/2] Parameterize bright windows dimming sensitivity and
 sampling count

---
 src/backend/gl/gl_common.c |  4 ++--
 src/backend/gl/gl_common.h |  3 +++
 src/backend/gl/glx.c       |  7 +++++++
 src/config.c               |  3 +++
 src/config.h               |  4 ++++
 src/config_libconfig.c     |  4 ++++
 src/options.c              | 18 ++++++++++++++++++
 7 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/src/backend/gl/gl_common.c b/src/backend/gl/gl_common.c
index f65b7be..039f7dd 100644
--- a/src/backend/gl/gl_common.c
+++ b/src/backend/gl/gl_common.c
@@ -213,10 +213,10 @@ static void _gl_compose(backend_t *base, struct gl_image *img, GLuint target,
 		glUniform1i(gd->win_shader.unifm_invert_color, img->color_inverted);
 	}
 	if (gd->win_shader.unifm_brightness_count >= 0){
-		glUniform1i(gd->win_shader.unifm_brightness_count, 40); //TODO: parameterize
+		glUniform1i(gd->win_shader.unifm_brightness_count, gd->bright_dim_sample_count);
 	}
 	if (gd->win_shader.unifm_sensitivity >= 0){
-		glUniform1f(gd->win_shader.unifm_sensitivity, 0.5); //TODO: parameterize
+		glUniform1f(gd->win_shader.unifm_sensitivity, (float)gd->bright_dim);
 	}
 	if (gd->win_shader.unifm_tex >= 0) {
 		glUniform1i(gd->win_shader.unifm_tex, 0);
diff --git a/src/backend/gl/gl_common.h b/src/backend/gl/gl_common.h
index 2fc03f5..08b2171 100644
--- a/src/backend/gl/gl_common.h
+++ b/src/backend/gl/gl_common.h
@@ -66,6 +66,9 @@ struct gl_data {
 	GLuint back_texture, back_fbo;
 	GLuint present_prog;
 
+	double bright_dim;
+	int bright_dim_sample_count;
+
 	/// Called when an gl_texture is decoupled from the texture it refers. Returns
 	/// the decoupled user_data
 	void *(*decouple_texture_user_data)(backend_t *base, void *user_data);
diff --git a/src/backend/gl/glx.c b/src/backend/gl/glx.c
index c2e3023..d9a63dc 100644
--- a/src/backend/gl/glx.c
+++ b/src/backend/gl/glx.c
@@ -351,6 +351,13 @@ static backend_t *glx_init(session_t *ps) {
 		glx_set_swap_interval(0, ps->dpy, tgt);
 	}
 
+	gd->gl.bright_dim = ps->o.bright_dim;
+	if (ps->o.bright_dim > 0.0) {
+		gd->gl.bright_dim_sample_count = ps->o.bright_dim_sample_count;
+	} else {
+		ps->o.bright_dim_sample_count = 0;
+	}
+
 	success = true;
 
 end:
diff --git a/src/config.c b/src/config.c
index c43ff0f..07f8720 100644
--- a/src/config.c
+++ b/src/config.c
@@ -548,6 +548,9 @@ char *parse_config(options_t *opt, const char *config_file, bool *shadow_enable,
 	    .inactive_dim = 0.0,
 	    .inactive_dim_fixed = false,
 	    .invert_color_list = NULL,
+	    .bright_dim = 0.0,
+	    .bright_dim_sample_count = 40.0,
+
 	    .opacity_rules = NULL,
 
 	    .use_ewmh_active_win = false,
diff --git a/src/config.h b/src/config.h
index a6a9f61..3fad5c2 100644
--- a/src/config.h
+++ b/src/config.h
@@ -206,6 +206,10 @@ typedef struct options {
 	/// Whether to use fixed inactive dim opacity, instead of deciding
 	/// based on window opacity.
 	bool inactive_dim_fixed;
+	/// How much to dim bright window. 0.0 - 1.0, 0 to disable.
+	double bright_dim;
+	/// How much samples to make for each dimension (x,y) when estimating window brightness.
+	int bright_dim_sample_count;
 	/// Conditions of windows to have inverted colors.
 	c2_lptr_t *invert_color_list;
 	/// Rules to change window opacity.
diff --git a/src/config_libconfig.c b/src/config_libconfig.c
index 902ed91..f4642b1 100644
--- a/src/config_libconfig.c
+++ b/src/config_libconfig.c
@@ -289,6 +289,10 @@ char *parse_config_libconfig(options_t *opt, const char *config_file, bool *shad
 	lcfg_lookup_bool(&cfg, "inactive-opacity-override", &opt->inactive_opacity_override);
 	// --inactive-dim
 	config_lookup_float(&cfg, "inactive-dim", &opt->inactive_dim);
+	// --bright-dim
+	config_lookup_float(&cfg, "bright-dim", &opt->bright_dim);
+	// --bright-dim-sample-count
+	config_lookup_int(&cfg, "bright-dim-sample-count", &opt->bright_dim_sample_count);
 	// --mark-wmwin-focused
 	lcfg_lookup_bool(&cfg, "mark-wmwin-focused", &opt->mark_wmwin_focused);
 	// --mark-ovredir-focused
diff --git a/src/options.c b/src/options.c
index c66fbfc..d5be0da 100644
--- a/src/options.c
+++ b/src/options.c
@@ -110,6 +110,12 @@ static void usage(const char *argv0, int ret) {
 	    "--inactive-dim value\n"
 	    "  Dim inactive windows. (0.0 - 1.0, defaults to 0)\n"
 	    "\n"
+	    "--bright-dim value\n"
+	    "  Dim bright windows. (0.0 - 1.0, defaults to 0)\n"
+	    "\n"
+	    "--bright-dim-sample-count value\n"
+	    "  How much samples to make for each dimension when estimating window brightness (1 - 100, defaults to 40)\n"
+	    "\n"
 	    "--active-opacity opacity\n"
 	    "  Default opacity for active windows. (0.0 - 1.0)\n"
 	    "\n"
@@ -410,6 +416,8 @@ static const struct option longopts[] = {
     {"use-damage", no_argument, NULL, 323},
     {"no-use-damage", no_argument, NULL, 324},
     {"no-vsync", no_argument, NULL, 325},
+    {"bright-dim", required_argument, NULL, 326},
+    {"bright-dim-sample-count", required_argument, NULL, 327},
     {"experimental-backends", no_argument, NULL, 733},
     {"monitor-repaint", no_argument, NULL, 800},
     {"diagnostics", no_argument, NULL, 801},
@@ -791,6 +799,14 @@ void get_cfg(options_t *opt, int argc, char *const *argv, bool shadow_enable,
 		case 325:
 			opt->vsync = false;
 			break;
+		case 326:
+			// --bright-dim
+			opt->bright_dim = atof(optarg);
+			break;
+		case 327:
+			// --bright-dim-sample_count
+			opt->bright_dim_sample_count = atoi(optarg);
+			break;
 		P_CASEBOOL(733, experimental_backends);
 		P_CASEBOOL(800, monitor_repaint);
 		case 801: opt->print_diagnostics = true; break;
@@ -818,6 +834,8 @@ void get_cfg(options_t *opt, int argc, char *const *argv, bool shadow_enable,
 	opt->shadow_green = normalize_d(opt->shadow_green);
 	opt->shadow_blue = normalize_d(opt->shadow_blue);
 	opt->inactive_dim = normalize_d(opt->inactive_dim);
+	opt->bright_dim = normalize_d(opt->bright_dim);
+	opt->bright_dim_sample_count = normalize_i_range(opt->bright_dim_sample_count, 1, 100);
 	opt->frame_opacity = normalize_d(opt->frame_opacity);
 	opt->shadow_opacity = normalize_d(opt->shadow_opacity);
 	opt->refresh_rate = normalize_i_range(opt->refresh_rate, 0, 300);
-- 
2.24.0-rc2

