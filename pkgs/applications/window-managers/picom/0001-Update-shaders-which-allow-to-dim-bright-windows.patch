From f2e02fa23629f199c1b3a165661e55a58afc195d Mon Sep 17 00:00:00 2001
From: Rytis Karpuska <rytis.karpuska@gmail.com>
Date: Mon, 30 Sep 2019 02:42:38 +0300
Subject: [PATCH 1/2] Update shaders which allow to dim bright windows

---
 src/backend/gl/gl_common.c | 32 ++++++++++++++++++++++++++++++++
 src/backend/gl/gl_common.h |  2 ++
 2 files changed, 34 insertions(+)

diff --git a/src/backend/gl/gl_common.c b/src/backend/gl/gl_common.c
index cfb0465..f65b7be 100644
--- a/src/backend/gl/gl_common.c
+++ b/src/backend/gl/gl_common.c
@@ -212,6 +212,12 @@ static void _gl_compose(backend_t *base, struct gl_image *img, GLuint target,
 	if (gd->win_shader.unifm_invert_color >= 0) {
 		glUniform1i(gd->win_shader.unifm_invert_color, img->color_inverted);
 	}
+	if (gd->win_shader.unifm_brightness_count >= 0){
+		glUniform1i(gd->win_shader.unifm_brightness_count, 40); //TODO: parameterize
+	}
+	if (gd->win_shader.unifm_sensitivity >= 0){
+		glUniform1f(gd->win_shader.unifm_sensitivity, 0.5); //TODO: parameterize
+	}
 	if (gd->win_shader.unifm_tex >= 0) {
 		glUniform1i(gd->win_shader.unifm_tex, 0);
 	}
@@ -570,12 +576,33 @@ const char *vertex_shader = GLSL(330,
 	uniform mat4 projection;
 	uniform vec2 orig;
 	uniform vec2 texorig;
+	uniform int brightness_count;
+	uniform sampler2D tex;
 	layout(location = 0) in vec2 coord;
 	layout(location = 1) in vec2 in_texcoord;
 	out vec2 texcoord;
+	out float brightness;
+
+	void estimate_brightness(out float brightness_value)
+	{
+		// Sample window texture in order to acquire an estimate on window brightness
+		brightness_value = 0;
+		for (float x = 0; x < 1.0; x += 1.0/brightness_count)
+			for (float y = 0; y < 1.0; y += 1.0/brightness_count)
+			{
+				vec4 color = texture(tex, vec2(x, y));
+				brightness_value += (color.r + color.g + color.b) / 3;
+			}
+		brightness_value /= brightness_count * brightness_count;
+	}
+
 	void main() {
 		gl_Position = projection * vec4(coord + orig, 0, 1);
 		texcoord = in_texcoord + texorig;
+
+		brightness = 0;
+		if (brightness_count > 0)
+			estimate_brightness(brightness);
 	}
 );
 // clang-format on
@@ -593,8 +620,10 @@ static int gl_win_shader_from_string(const char *vshader_str, const char *fshade
 	}
 
 	// Get uniform addresses
+	ret->unifm_brightness_count = glGetUniformLocationChecked(ret->prog, "brightness_count");
 	ret->unifm_opacity = glGetUniformLocationChecked(ret->prog, "opacity");
 	ret->unifm_invert_color = glGetUniformLocationChecked(ret->prog, "invert_color");
+	ret->unifm_sensitivity = glGetUniformLocationChecked(ret->prog, "sensitivity");
 	ret->unifm_tex = glGetUniformLocationChecked(ret->prog, "tex");
 	ret->unifm_dim = glGetUniformLocationChecked(ret->prog, "dim");
 
@@ -958,7 +987,9 @@ const char *win_shader_glsl = GLSL(330,
 	uniform float opacity;
 	uniform float dim;
 	uniform bool invert_color;
+	uniform float sensitivity;
 	in vec2 texcoord;
+	in float brightness;
 	uniform sampler2D tex;
 
 	void main() {
@@ -967,6 +998,7 @@ const char *win_shader_glsl = GLSL(330,
 			c = vec4(c.aaa - c.rgb, c.a);
 		}
 		c = vec4(c.rgb * (1.0 - dim), c.a) * opacity;
+		c.rgb = c.rgb * (1.0 - brightness * sensitivity);
 		gl_FragColor = c;
 	}
 );
diff --git a/src/backend/gl/gl_common.h b/src/backend/gl/gl_common.h
index 0687513..2fc03f5 100644
--- a/src/backend/gl/gl_common.h
+++ b/src/backend/gl/gl_common.h
@@ -18,6 +18,8 @@ typedef struct {
 	GLuint prog;
 	GLint unifm_opacity;
 	GLint unifm_invert_color;
+	GLint unifm_brightness_count;
+	GLint unifm_sensitivity;
 	GLint unifm_tex;
 	GLint unifm_dim;
 } gl_win_shader_t;
-- 
2.24.0-rc2

