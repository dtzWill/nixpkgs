{stdenv, fetchFromGitHub
, buildPackages
, callPackage
, pkgconfig
, libusb, readline, libewf, perl, zlib, openssl
, libuv, file, libzip, xxHash
, gtk2 ? null, vte ? null, gtkdialog ? null
, python3 ? null
, ruby ? null
, lua ? null
, useX11, rubyBindings, pythonBindings, luaBindings
}:

assert useX11 -> (gtk2 != null && vte != null && gtkdialog != null);
assert rubyBindings -> ruby != null;
assert pythonBindings -> python3 != null;


let
  inherit (stdenv.lib) optional;

  generic = {
    version_commit,
    gittap,
    gittip,
    rev,
    version,
    sha256,
    cs_tip,
    cs_sha256
  }:
    stdenv.mkDerivation rec {
      name = "radare2-${version}";

      src = fetchFromGitHub {
        owner = "radare";
        repo = "radare2";
        inherit rev sha256;
      };

      postPatch = let
        capstone = fetchFromGitHub {
          owner = "aquynh";
          repo = "capstone";
          # version from $sourceRoot/shlr/Makefile
          rev = cs_tip;
          sha256 = cs_sha256;
        };
      in ''
        if ! grep -F "CS_TIP=${cs_tip}" shlr/Makefile; then echo "CS_TIP mismatch"; exit 1; fi
        # When using meson, it expects capstone source relative to build directory
        mkdir -p build/shlr
        cp -r ${capstone} shlr/capstone
        chmod -R +w shlr/capstone
      '';

      postInstall = ''
        install -D -m755 $src/binr/r2pm/r2pm $out/bin/r2pm
      '';

      WITHOUT_PULL="1";
      makeFlags = [
        "GITTAP=${gittap}"
        "GITTIP=${gittip}"
        "RANLIB=${stdenv.cc.bintools.bintools}/bin/${stdenv.cc.bintools.targetPrefix}ranlib"
      ];
      configureFlags = [
        "--with-sysmagic"
        "--with-syszip"
        "--with-sysxxhash"
        "--with-openssl"
      ];

      enableParallelBuilding = true;
      depsBuildBuild = [ buildPackages.stdenv.cc ];

      nativeBuildInputs = [ pkgconfig ];
      buildInputs = [ file readline libusb libewf perl zlib openssl libuv ]
        ++ optional useX11 [ gtkdialog vte gtk2 ]
        ++ optional rubyBindings [ ruby ]
        ++ optional pythonBindings [ python3 ]
        ++ optional luaBindings [ lua ];

      propagatedBuildInputs = [
        # radare2 exposes r_lib which depends on these libraries
        file # for its list of magic numbers (`libmagic`)
        libzip
        xxHash
      ];

      meta = {
        description = "unix-like reverse engineering framework and commandline tools";
        homepage = http://radare.org/;
        license = stdenv.lib.licenses.gpl2Plus;
        maintainers = with stdenv.lib.maintainers; [ raskin makefu mic92 ];
        platforms = with stdenv.lib.platforms; linux;
        inherit version;
      };
  };
in {
  #<generated>
  # DO NOT EDIT! Automatically generated by ./update.py
  radare2 = generic {
    version_commit = "20677";
    gittap = "3.2.0";
    gittip = "98027a8e5c15ab04c2471b8299fcdb568b8083e6";
    rev = "3.2.0";
    version = "3.2.0";
    sha256 = "1029p5xajww3x4yq2gj0qfsqbq2bxk0nmhxbl7h6k1nqsx71q0si";
    cs_tip = "0ff8220adef16a942697afd245afc5ab0f70cbf8";
    cs_sha256 = "1ak8ysgivq28d23r77881p0z5v65jhpap5plm10p9j3y2x00n3zn";
  };
  r2-for-cutter = generic {
    version_commit = "20677";
    gittap = "3.1.3-140-g2462653a2";
    gittip = "2462653a232b40ac43dfcf4db9c5226c8cbbad9f";
    rev = "2462653a232b40ac43dfcf4db9c5226c8cbbad9f";
    version = "2018-12-25";
    sha256 = "12fpwfp4y3w6837jl5y8jrpw92rzwd9hkgcg6h6b7dw3yydbw3s4";
    cs_tip = "81e424c50a7eace8bcb286f7142b587eda20c437";
    cs_sha256 = "1p3dbrlqbyicqszm3vz4jwd0z5x0mbl2v606drb0m12bsndmqqhd";
  };
  #</generated>
}
